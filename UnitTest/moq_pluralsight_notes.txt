TEST DOUBLES  It's a generic term for any case where you replace a production object for testing purposes.
1. Fakes
	Working implementation not suitable for prod. Ex: EF Core in memory provider
2. Dummies
	Passed around, Never used / accessed Satisfy parameters
3. Stubs
	Provide answers to calls properties gets method return values. Ex: Property gets  methods return values
4. Mocks
	Expect verify calls. Ex: properties & methods.
	
	
ARGUMENT MATCHING

            Mock<IFrequentFlyerNumberValidator> mockValidator =
                new Mock<IFrequentFlyerNumberValidator>();

            //mockValidator.Setup(x => x.IsValid(It.IsAny<string>())).Returns(true);
            //mockValidator.Setup(x => x.IsValid(It.Is<string>(number => number.StartsWith('x'))))
            //            .Returns(true);
            //mockValidator.Setup(x => x.IsValid(It.IsIn("x", "y", "z"))).Returns(true);
            //mockValidator.Setup(x => x.IsValid(It.IsInRange("b", "z", Range.Inclusive)))
            //             .Returns(true);
            mockValidator.Setup(x => x.IsValid(It.IsRegex("[a-z]",
                                System.Text.RegularExpressions.RegexOptions.None)))
                         .Returns(true);

            var sut = new CreditCardApplicationEvaluator(mockValidator.Object);

            var application = new CreditCardApplication
            {
                GrossAnnualIncome = 19_999,
                Age = 42,
                FrequentFlyerNumber = "a"
            };
			
			
MockBehavior
	.Strict
	.Lose
	.Default
	
Comparing Strict and Loose Mocks
Loose
1. Less lines of setup code
2. Default values
3. less brittle test
4. existing test continue to work

Strict
1. More setup code
2. have to setup each called method
3. More brittle mocks
4. Might brake more often


Example:

Mock<IFrequentFlyerNumberValidator> mockValidator =
                new Mock<IFrequentFlyerNumberValidator>(MockBehavior.Strict);


MOCKING PROPERTIES
Auto-mocking property hierarchy

By default mock doesn't track changes during running application
	SetupProperty(x => x.PropertyName);
	
if we have a lot of properties to set up I can do this instead:
	mock.SetupAllProperties();
	
Behaviour verification testing & State Based Testing.
mockValidator.Verify(x => x.IsValid(It.IsAny<string>()), Times.Exactly(numberOfTimesExptectedToBeCalled));

Summary:
mockValidator.Verify(x=> x.IsValid("q"));
added custom message
Times.Never & Times Exactly
VerifyGet()


Raised events from mock objects
	mockValidator.Rase()
SetupSequence()



Linq To Mocks Syntax
	Mock.Of<interface>
	(
		validator =>
		validator.ServiceInformation.License.Licensekey == "OK" &&
		validator.IsValid(It.IsAny<string>()) == true
	);
	
***** QUESTIONS
How do you configure a mocked property to return a specified value?
	Your choice: correct - mockValidator.Setup(x => x.LicenseKey).Returns("EXPIRED");

How do you verify that a property setter was called with a specific value?
	mockValidator.VerifySet(x => x.ValidationMode = ValidationMode.Detailed);
